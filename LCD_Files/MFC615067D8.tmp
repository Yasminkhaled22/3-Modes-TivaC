
#include "Timer1.h"
#include "types.h"
#include "tm4c123gh6pm.h"

static void (*g_Timer1_Call_Back_Ptr)(void) = NULL_PTR;

void Timer1A_Init(void)
{
  
  SYSCTL_RCGCTIMER_R |= (1<<1);
  TIMER1_CTL_R = 0;
  TIMER1_CFG_R = 0x04;
  TIMER1_TAMR_R = 0x02;
  TIMER1_TAPR_R = 255;
  TIMER1_IMR_R |= (1<<0);
  TIMER1_TAILR_R = 64000;
  TIMER1_ICR_R = 0X1;
  TIMER1_CTL_R |= 0x01;
  NVIC_EN0_R = (1<<21);
  
  
//      SYSCTL_RCGCTIMER_R |= (1<<1);
//      TIMER1_CTL_R =0 ;			              //timer0A 24-b, +edge, interrupts
//      TIMER1_CFG_R = 0x4;                                   /*select 16-bit configuration option */
//      TIMER1_TAMR_R = 0x02;                           // count down & periodic mode
//      TIMER1_IMR_R = (1<<0);                            //enable capture match interrupts // nerga3laha
//      TIMER1_TAILR_R = 6400-1;			      //start value
//      TIMER1_TAPR_R = 250-1 ;				      //prescale, creating 24-bit
//      TIMER1_ICR_R = 0x01;	                      // clear timer0A capture match flag
//      TIMER1_CTL_R = 0x01; 

   //   NVIC_EN1_R |= (1<<21);                         // enable IRQ 21 in NVIC
}

void Timer1A_Handler(void)
{
   TIMER0_ICR_R = TIMER_ICR_TATOCINT;
   if(g_Timer1_Call_Back_Ptr != NULL_PTR)
  {
    (*g_Timer1_Call_Back_Ptr)();
  } 
      
}

void Timer1_SetCallBack(void(*Ptr2Func)(void))
{
    g_Timer1_Call_Back_Ptr = Ptr2Func;
}


/*void stop_watch_init()
{
    NVIC_EN1_R |= (1<<30);           // 9) enable IRQ 30 in NVIC
    
    GPIO_PORTF_DIR_R &= (1<<4)|(1<<0) |~(1<<1);
    GPIO_PORTF_DEN_R|= (1<<4)|(1<<1)|(1<<0);           
    GPIO_PORTF_PUR_R |= (1<<4)|(1<<0)|(1<<1);         
    
    GPIO_PORTF_IS_R  = (1<<4)|(1<<0)|(1<<1);             
    GPIO_PORTF_IEV_R &= (1<<4)|(1<<0)|~(1<<1);        
    GPIO_PORTF_ICR_R |= (1<<4)|(1<<0)|(1<<1);          
    GPIO_PORTF_IM_R  |= (1<<4)|(1<<0)|(1<<1); 

}*/

/*void Reset (void)
{
	sec=0;
	min=0;
        hour=0;
}

void pause (void)
{       
    SYSCTL_RCGCTIMER_R &=~(0x00000002) ;			//Disabled clk TIMER1		

}
void Resume(void)
{
    SYSCTL_RCGCTIMER_R |= 0x00000002;                        //Enabled clk TIMER1
}

void GPIOF_Handler(void)
{	 
    if (GPIO_PORTF_MIS_R & 0x10) 
    {   
      Resume();
      GPIO_PORTF_ICR_R|= 0x10; 
     } 
    else if (GPIO_PORTF_MIS_R & 0x02) 
    {   
     Reset();
     GPIO_PORTF_ICR_R |= 0x02; *//* clear the interrupt flag */
  /*  }
    else if (GPIO_PORTF_MIS_R & 0x01) 
    {   
     pause();
     GPIO_PORTF_ICR_R |= 0x01; /* clear the interrupt flag 
    }
}*/